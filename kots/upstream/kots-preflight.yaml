# Copyright (c) 2022 Gitpod GmbH. All rights reserved.
# Licensed under the MIT License. See License-MIT.txt in the project root for license information.

apiVersion: troubleshoot.sh/v1beta2
kind: Preflight
metadata:
  name: gitpod
  annotations:
    kots.io/exclude: "true"
spec:
  collectors:
    # This will be overridden by the generate_preflight_checks in the Makefile - this must remain at position 0
    - runPod:
        name: validate-config
        namespace: '{{repl Namespace }}'
        podSpec:
          containers:
            - name: installer
              image: eu.gcr.io/gitpod-core-dev/build/installer:release-2022.10.2.1
              volumeMounts:
                - mountPath: /mnt/node0
                  name: node-fs0
                  readOnly: true
              env:
                - name: MOUNT_PATH
                  value: /mnt/node0
                - name: REGISTRY_DOCKER_CONFIG_JSON
                  valueFrom:
                    secretKeyRef:
                      name: custom-registry-credentials
                      key: .dockerconfigjson
                      optional: true
                - name: EXTERNAL_DOCKER_CONFIG_JSON
                  valueFrom:
                    secretKeyRef:
                      name: external-container-registry
                      key: .dockerconfigjson
                      optional: true
                - name: LOCAL_REGISTRY_IMAGE_PULL_DOCKER_CONFIG_JSON
                  valueFrom:
                    secretKeyRef:
                      name: repl{{ ImagePullSecretName | quote }}
                      key: .dockerconfigjson
                      optional: true
                - name: GITPOD_INSTALLER_CONFIG
                  value: /tmp/gitpod-config.yaml
                - name: GITPOD_OBJECTS
                  value: /tmp/gitpod
                - name: CURSOR
                  value: repl{{ Cursor | quote }}
                - name: DISTRIBUTION
                  value: repl{{ Distribution | quote }}
                - name: DOMAIN
                  value: repl{{ ConfigOption "domain" | quote }}
                - name: NAMESPACE
                  value: repl{{ Namespace | quote }}
                - name: OPEN_VSX_URL
                  value: repl{{ ConfigOption "openVsxUrl" | quote }}
                - name: SSH_GATEWAY
                  value: repl{{ ConfigOption "ssh_gateway" | quote }}
                - name: HTTP_PROXY_NAME
                  value: '{{repl if (ConfigOptionEquals "enable_proxy_settings" "1" ) }}http-proxy-settings{{repl end }}'
                - name: LICENSE_NAME
                  value: gitpod-license
                - name: SSH_GATEWAY_HOST_KEY_NAME
                  value: ssh-gateway-host-key
                - name: DB_INCLUSTER_ENABLED
                  value: repl{{ ConfigOption "db_incluster" | quote }}
                - name: DB_CLOUDSQL_ENABLED
                  value: repl{{ ConfigOption "db_cloudsql_enabled" | quote }}
                - name: DB_CLOUDSQL_INSTANCE
                  value: repl{{ ConfigOption "db_cloudsql_instance" | quote }}
                - name: DB_CLOUDSQL_SERVICE_ACCOUNT_NAME
                  value: cloudsql
                - name: DB_EXTERNAL_CERTIFICATE_NAME
                  value: database
                - name: HAS_LOCAL_REGISTRY
                  value: repl{{ HasLocalRegistry | quote }}
                - name: LOCAL_REGISTRY_ADDRESS
                  value: repl{{ LocalRegistryAddress | quote }}
                - name: LOCAL_REGISTRY_HOST
                  value: repl{{ LocalRegistryHost | quote }}
                - name: IMAGE_PULL_SECRET_NAME
                  value: repl{{ ImagePullSecretName | quote }}
                - name: REGISTRY_INCLUSTER_ENABLED
                  value: repl{{ ConfigOption "reg_incluster" | quote }}
                - name: REGISTRY_URL
                  value: repl{{ ConfigOption "reg_url" | quote }}
                - name: REGISTRY_INCLUSTER_STORAGE
                  value: repl{{ ConfigOption "reg_incluster_storage" | quote }}
                - name: REGISTRY_INCLUSTER_STORAGE_S3_REGION
                  value: repl{{ ConfigOption "reg_incluster_storage_s3_region" | quote }}
                - name: REGISTRY_INCLUSTER_STORAGE_S3_ENDPOINT
                  value: repl{{ ConfigOption "reg_incluster_storage_s3_endpoint" | quote }}
                - name: REGISTRY_INCLUSTER_STORAGE_S3_BUCKET_NAME
                  value: repl{{ ConfigOption "reg_incluster_storage_s3_bucketname" | quote }}
                - name: REGISTRY_INCLUSTER_STORAGE_S3_CERTIFICATE_NAME
                  value: container-registry-s3-backend
                - name: REGISTRY_DOCKER_CONFIG_ENABLED
                  value: repl{{ ConfigOption "reg_docker_config_enable" | quote }}
                - name: REGISTRY_EXTERNAL_CERTIFICATE_NAME
                  value: container-registry
                - name: STORE_PROVIDER
                  value: repl{{ ConfigOption "store_provider" | quote }}
                - name: STORE_REGION
                  value: repl{{ ConfigOption "store_region" | quote }}
                - name: STORE_GCP_PROJECT
                  value: repl{{ ConfigOption "store_gcp_project" | quote }}
                - name: STORE_S3_ENDPOINT
                  value: repl{{ ConfigOption "store_s3_endpoint" | quote }}
                - name: STORE_S3_BUCKET
                  value: repl{{ ConfigOption "store_s3_bucket" | quote }}
                - name: STORE_AZURE_CREDENTIALS_NAME
                  value: storage-azure
                - name: STORE_GCP_SERVICE_ACCOUNT_NAME
                  value: storage-gcp
                - name: STORE_S3_CREDENTIALS_NAME
                  value: storage-s3
                - name: CERT_MANAGER_ENABLED
                  value: repl{{ ConfigOption "cert_manager_enabled" | quote }}
                - name: TLS_SELF_SIGNED_ENABLED
                  value: repl{{ ConfigOption "tls_self_signed_enabled" | quote }}
                - name: TLS_CUSTOM_CA_CRT_ENABLED
                  value: repl{{ ConfigOptionNotEquals "tls_ca_crt" "" | quote }}
                - name: TLS_CUSTOM_CA_CRT_CREDENTIALS_NAME
                  value: ca-certificate
                - name: USER_MANAGEMENT_BLOCK_ENABLED
                  value: repl{{ ConfigOption "user_management_block_enabled" | quote }}
                - name: USER_MANAGEMENT_BLOCK_PASSLIST
                  value: repl{{ ConfigOption "user_management_block_passlist" | quote }}
                - name: ADVANCED_MODE_ENABLED
                  value: repl{{ ConfigOption "advanced_mode_enabled" | quote }}
                - name: COMPONENT_PROXY_SERVICE_TYPE
                  value: repl{{ ConfigOption "component_proxy_service_serviceType" | quote }}
                - name: CUSTOMIZATION_PATCH_ENABLED
                  value: repl{{ ConfigOptionNotEquals "customization_patch" "" | quote }}
                - name: INSTALLER_TIMEOUT
                  value: repl{{ ConfigOption "installer_timeout" | quote }}
                - name: CONFIG_PATCH
                  value: repl{{ ConfigOptionData "config_patch" | default "" | quote }}
                - name: CUSTOMIZATION_PATCH
                  value: repl{{ ConfigOptionData "customization_patch" | default "" | quote }}
                - name: INSTALLER_DRY_RUN
                  value: "true"
              command:
                - /app/scripts/kots-install.sh
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: gitpod.io/workload_workspace_regular
                        operator: Exists
                  - matchExpressions:
                      - key: gitpod.io/workload_workspace_headless
                        operator: Exists
          serviceAccountName: kotsadm
          restartPolicy: OnFailure
          volumes:
            - name: node-fs0
              hostPath:
                path: /
                type: Directory
    - clusterResources:
        namespaces:
          - '{{repl Namespace }}'
    - run:
        collectorName: database
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/database:sje-kots-config-check.9
        name: database
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "db_incluster" }}' # DB_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "db_cloudsql_enabled" }}' # DB_CLOUDSQL_ENABLED
          - '{{repl ConfigOption "db_username" }}' # DB_USERNAME
          - '{{repl ConfigOption "db_password" }}' # DB_PASSWORD
          - '{{repl ConfigOption "db_host" }}' # DB_HOST
          - '{{repl ConfigOption "db_port" }}' # DB_PORT
          - '{{repl ConfigOption "db_cloudsql_instance" }}' # CloudSQL instances
          - '{{repl ConfigOption "db_gcp_credentials" }}' # CloudSQL credentials file
    - run:
        collectorName: "kernel"
        image: alpine/semver
        name: kernel
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - semver --coerce --range '>=5.4.0' $(uname -r) || echo invalid
    - run:
        collectorName: registry
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/registry:sje-kots-registry-check.16
        name: registry
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "reg_incluster" }}' # REG_IN_CLUSTER_ENABLED
          - '{{repl ConfigOption "reg_username" }}' # REG_USERNAME
          - '{{repl ConfigOption "reg_password" }}' # REG_PASSWORD
          - '{{repl ConfigOption "reg_url" }}' # REG_URL
          - '{{repl ConfigOption "reg_server" }}' # REG_SERVER
          - '{{repl ConfigOptionEquals "reg_incluster_storage" "s3" }}' # REG_IN_CLUSTER_S3_ENABLED
          - '{{repl ConfigOption "reg_incluster_storage_s3_region" }}' # REG_STORE_LOCATION
          - '{{repl ConfigOption "reg_incluster_storage_s3_endpoint" }}' # REG_S3_ENDPOINT
          - '{{repl ConfigOption "reg_incluster_storage_s3_accesskey" }}' # REG_S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "reg_incluster_storage_s3_secretkey" }}' # REG_S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "reg_incluster_storage_s3_bucketname" }}' # REG_S3_BUCKET_NAME
    - run:
        collectorName: storage
        image: eu.gcr.io/gitpod-core-dev/build/kots-config-check/storage:sje-kots-storage-check.9
        name: storage
        namespace: '{{repl Namespace }}'
        args:
          - '{{repl ConfigOption "store_provider" }}' # STORE_PROVIDER
          - '{{repl ConfigOption "store_region" }}' # STORE_LOCATION
          - '{{repl ConfigOption "store_azure_account_name" }}' # AZURE_ACCOUNT_NAME
          - '{{repl ConfigOption "store_azure_access_key" }}' # AZURE_ACCESS_KEY
          - '{{repl ConfigOption "store_gcp_project" }}' # GCP_PROJECT_ID
          - '{{repl ConfigOption "store_gcp_credentials" }}' # GCP_SERVICE_ACCOUNT_KEY
          - '{{repl ConfigOption "store_s3_endpoint" }}' # S3_ENDPOINT
          - '{{repl ConfigOption "store_s3_access_key_id" }}' # S3_ACCESS_KEY_ID
          - '{{repl ConfigOption "store_s3_secret_access_key" }}' # S3_SECRET_ACCESS_KEY
          - '{{repl ConfigOption "store_s3_bucket" }}' # S3_BUCKET_NAME
    - run:
        # Check that the pull registry is accessible from the cluster
        collectorName: ping-registry
        image: alpine/curl
        name: ping-registry
        namespace: '{{repl Namespace }}'
        command:
          - /bin/sh
          - -c
        args:
          - |
            CONNECTION="error"

            export http_proxy="{{repl HTTPProxy }}"
            export HTTP_PROXY="{{repl HTTPProxy }}"
            export https_proxy="{{repl HTTPSProxy }}"
            export HTTPS_PROXY="{{repl HTTPSProxy }}"
            export no_proxy="{{repl NoProxy }}"
            export NO_PROXY="{{repl NoProxy }}"

            if [ '{{repl HasLocalRegistry }}' = "true" ];
            then
              # Don't test for airgapped
              CONNECTION="ok"
            else
              URL="https://eu.gcr.io/v2/"
              echo "ping ${URL}"
              if curl --silent --max-time 5 "${URL}" > /dev/null;
              then
                CONNECTION="ok"
              fi
            fi

            echo "connection: ${CONNECTION}"
  analyzers:
    - textAnalyze:
        checkName: Gitpod configuration
        fileName: validate-config/validate-config.log
        regexGroups: 'Gitpod: status (?P<Status>\w+)'
        outcomes:
          - fail:
              when: "Status == fail"
              message: |
                Your generated Gitpod config failed validation. Run
                `kubectl get configmaps -n {{repl Namespace }} gitpod-installation-status -o jsonpath="{.data.gitpod-installer\.log}"`
                to view the output.
          - pass:
              when: "Status == pass"
              message: |
                Your generated Gitpod config is valid. Run
                `kubectl get configmaps -n {{repl Namespace }} gitpod-installation-status -o jsonpath="{.data.gitpod-installer\.log}"`
                to view the output.
    - clusterVersion:
        outcomes:
          - fail:
              when: "< 1.20.0"
              message: The application requires Kubernetes 1.20.0 or later, and recommends 1.21.0.
              uri: https://www.kubernetes.io
          - warn:
              when: "< 1.21.0"
              message: Your cluster meets the minimum version of Kubernetes, but we recommend you update to 1.21.0 or later.
              uri: https://kubernetes.io
          - pass:
              message: Your cluster meets the recommended and required versions of Kubernetes.
    - textAnalyze:
        checkName: Kernel version is 5.4.0 or above
        fileName: kernel/kernel.log
        regex: invalid
        outcomes:
          - pass:
              when: "false"
              message: Kernel version valid
          - fail:
              when: "true"
              message: Kernel must be 5.4.0 or above
    - containerRuntime:
        outcomes:
          - pass:
              when: "== containerd"
              message: containerd runtime was found.
          - fail:
              message: Did not find containerd runtime.
    - distribution:
        outcomes:
          - fail:
              when: == openshift
              message: OpenShift is not supported
          - pass:
              message: The cluster is using a supported distribution
    - nodeResources:
        checkName: At least one node must "gitpod.io/workload_meta" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_meta" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_ide" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_ide" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_services" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_services" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_regular" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_regular" and value "true"
          - pass:
              message: Node with label exists
    - nodeResources:
        checkName: At least one node must have "gitpod.io/workload_workspace_headless" label
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "count() < 1"
              message: There must be at least one node with the label "gitpod.io/workload_workspace_headless" and value "true"
          - pass:
              message: Node with label exists
    - customResourceDefinition:
        checkName: Cert-manager is installed
        customResourceDefinitionName: certificates.cert-manager.io
        outcomes:
          - fail:
              message: Custom resource definition `certificates.cert-manager.io` was not found in the cluster. Please [install `cert-manager`](https://cert-manager.io/docs/installation/) to proceed.
          - pass:
              message: Cert-manager is installed and available.
    - nodeResources:
        checkName: CPU Cores per workload_meta node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_ide node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - pass:
              message: There are at least 2 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_services node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_regular node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: CPU Cores per workload_workspace_headless node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "min(cpuCapacity) < 2"
              message: The nodes must contain at least 2 cores
          - warn:
              when: "min(cpuCapacity) < 4"
              message: The nodes must contain at least 4 cores
          - pass:
              message: There are at least 4 cores in the nodes
    - nodeResources:
        checkName: Memory per workload_meta node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_meta: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 8G"
              message: Each node must have at least 8GB of memory
          - warn:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_ide node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_ide: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 4G"
              message: Each node must have at least 4GB of memory
          - pass:
              message: Each node has at least 4GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_services node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_services: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_regular node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_regular: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - nodeResources:
        checkName: Memory per workload_workspace_headless node
        filters:
          selector:
            matchLabel:
              gitpod.io/workload_workspace_headless: "true"
        outcomes:
          - fail:
              when: "min(memoryCapacity) < 16G"
              message: Each node must have at least 16GB of memory
          - pass:
              message: Each node has at least 16GB of memory
    - storageClass:
        checkName: Check for default storage class
        outcomes:
          - fail:
              message: No default storage class found
          - pass:
              message: Default storage class found
    - textAnalyze:
        checkName: Container registry connection is valid
        fileName: registry/registry.log
        regexGroups: 'registry: (?P<Registry>\w+)'
        outcomes:
          - pass:
              when: "Registry == ok"
              message: Container registry connection is valid
          - fail:
              message: Container registry connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Container registry S3 connection is valid
        fileName: registry/registry.log
        regexGroups: 's3: (?P<S3>\w+)'
        outcomes:
          - pass:
              when: "S3 == ok"
              message: Container registry S3 connection is valid
          - fail:
              message: Container registry S3 connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Database connection is valid
        fileName: database/database.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Database connection is valid
          - fail:
              message: Database connection is invalid. Please check your settings and that the database is accessible from your cluster
    - textAnalyze:
        checkName: Database version is valid
        fileName: database/database.log
        regexGroups: 'version: (?P<Version>\d(\.\d+)?)'
        outcomes:
          - pass:
              when: "Version == 5.7"
              message: Database version is valid
          - warn:
              message: Database version could not be verified. This should be MySQL 5.7
    - textAnalyze:
        checkName: Object storage connection is valid
        fileName: storage/storage.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Object storage connection is valid
          - fail:
              message: Object storage connection is invalid. Please check your settings and that the resource is accessible from your cluster
    - textAnalyze:
        checkName: Pull registry is accessible from cluster
        fileName: ping-registry/ping-registry.log
        regexGroups: 'connection: (?P<Connection>\w+)'
        outcomes:
          - pass:
              when: "Connection == ok"
              message: Registry is accessible
          - fail:
              message: Registry is inaccessible. Please check your network and firewall settings
    - textAnalyze:
        checkName: Check running workspaces
        fileName: cluster-resources/pods/{{repl Namespace }}.json
        regex: '"component": "workspace"'
        outcomes:
          - pass:
              when: "false"
              message: No running workspaces. Any workspaces started during the deployment process will be stopped.
          - fail:
              when: "true"
              message: There are running workspaces. These will be stopped during the deployment process.
